// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions.Store;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Models.CallRecords
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.20.0")]
    #pragma warning disable CS1591
    public partial class MediaStream : IAdditionalDataHolder, IBackedModel, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData
        {
            get { return BackingStore.Get<IDictionary<string, object>>("AdditionalData") ?? new Dictionary<string, object>(); }
            set { BackingStore.Set("AdditionalData", value); }
        }
        /// <summary>Codec name used to encode audio for transmission on the network. Possible values are: unknown, invalid, cn, pcma, pcmu, amrWide, g722, g7221, g7221c, g729, multiChannelAudio, muchv2, opus, satin, satinFullband, rtAudio8, rtAudio16, silk, silkNarrow, silkWide, siren, xmsRta, unknownFutureValue.</summary>
        public global::Microsoft.Graph.Models.CallRecords.AudioCodec? AudioCodec
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.CallRecords.AudioCodec?>("audioCodec"); }
            set { BackingStore?.Set("audioCodec", value); }
        }
        /// <summary>Average Network Mean Opinion Score degradation for stream. Represents how much the network loss and jitter has impacted the quality of received audio.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageAudioDegradation? AverageAudioDegradation
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageAudioDegradation?>("averageAudioDegradation"); }
            set { BackingStore?.Set("averageAudioDegradation", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageAudioDegradation AverageAudioDegradation
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageAudioDegradation>("averageAudioDegradation"); }
            set { BackingStore?.Set("averageAudioDegradation", value); }
        }
#endif
        /// <summary>Average jitter for the stream computed as specified in RFC 3550, denoted in ISO 8601 format. For example, 1 second is denoted as &apos;PT1S&apos;, where &apos;P&apos; is the duration designator, &apos;T&apos; is the time designator, and &apos;S&apos; is the second designator.</summary>
        public TimeSpan? AverageAudioNetworkJitter
        {
            get { return BackingStore?.Get<TimeSpan?>("averageAudioNetworkJitter"); }
            set { BackingStore?.Set("averageAudioNetworkJitter", value); }
        }
        /// <summary>Average estimated bandwidth available between two endpoints in bits per second.</summary>
        public long? AverageBandwidthEstimate
        {
            get { return BackingStore?.Get<long?>("averageBandwidthEstimate"); }
            set { BackingStore?.Set("averageBandwidthEstimate", value); }
        }
        /// <summary>Average duration of the received freezing time in the video stream.</summary>
        public TimeSpan? AverageFreezeDuration
        {
            get { return BackingStore?.Get<TimeSpan?>("averageFreezeDuration"); }
            set { BackingStore?.Set("averageFreezeDuration", value); }
        }
        /// <summary>Average jitter for the stream computed as specified in RFC 3550, denoted in ISO 8601 format. For example, 1 second is denoted as &apos;PT1S&apos;, where &apos;P&apos; is the duration designator, &apos;T&apos; is the time designator, and &apos;S&apos; is the second designator.</summary>
        public TimeSpan? AverageJitter
        {
            get { return BackingStore?.Get<TimeSpan?>("averageJitter"); }
            set { BackingStore?.Set("averageJitter", value); }
        }
        /// <summary>Average packet loss rate for stream.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averagePacketLossRate? AveragePacketLossRate
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averagePacketLossRate?>("averagePacketLossRate"); }
            set { BackingStore?.Set("averagePacketLossRate", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averagePacketLossRate AveragePacketLossRate
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averagePacketLossRate>("averagePacketLossRate"); }
            set { BackingStore?.Set("averagePacketLossRate", value); }
        }
#endif
        /// <summary>Ratio of the number of audio frames with samples generated by packet loss concealment to the total number of audio frames.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageRatioOfConcealedSamples? AverageRatioOfConcealedSamples
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageRatioOfConcealedSamples?>("averageRatioOfConcealedSamples"); }
            set { BackingStore?.Set("averageRatioOfConcealedSamples", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageRatioOfConcealedSamples AverageRatioOfConcealedSamples
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageRatioOfConcealedSamples>("averageRatioOfConcealedSamples"); }
            set { BackingStore?.Set("averageRatioOfConcealedSamples", value); }
        }
#endif
        /// <summary>Average frames per second received for all video streams computed over the duration of the session.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageReceivedFrameRate? AverageReceivedFrameRate
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageReceivedFrameRate?>("averageReceivedFrameRate"); }
            set { BackingStore?.Set("averageReceivedFrameRate", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageReceivedFrameRate AverageReceivedFrameRate
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageReceivedFrameRate>("averageReceivedFrameRate"); }
            set { BackingStore?.Set("averageReceivedFrameRate", value); }
        }
#endif
        /// <summary>Average network propagation round-trip time computed as specified in RFC 3550, denoted in ISO 8601 format. For example, 1 second is denoted as &apos;PT1S&apos;, where &apos;P&apos; is the duration designator, &apos;T&apos; is the time designator, and &apos;S&apos; is the second designator.</summary>
        public TimeSpan? AverageRoundTripTime
        {
            get { return BackingStore?.Get<TimeSpan?>("averageRoundTripTime"); }
            set { BackingStore?.Set("averageRoundTripTime", value); }
        }
        /// <summary>Average percentage of video frames lost as displayed to the user.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageVideoFrameLossPercentage? AverageVideoFrameLossPercentage
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageVideoFrameLossPercentage?>("averageVideoFrameLossPercentage"); }
            set { BackingStore?.Set("averageVideoFrameLossPercentage", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageVideoFrameLossPercentage AverageVideoFrameLossPercentage
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageVideoFrameLossPercentage>("averageVideoFrameLossPercentage"); }
            set { BackingStore?.Set("averageVideoFrameLossPercentage", value); }
        }
#endif
        /// <summary>Average frames per second received for a video stream, computed over the duration of the session.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageVideoFrameRate? AverageVideoFrameRate
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageVideoFrameRate?>("averageVideoFrameRate"); }
            set { BackingStore?.Set("averageVideoFrameRate", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageVideoFrameRate AverageVideoFrameRate
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageVideoFrameRate>("averageVideoFrameRate"); }
            set { BackingStore?.Set("averageVideoFrameRate", value); }
        }
#endif
        /// <summary>Average fraction of packets lost, as specified in RFC 3550, computed over the duration of the session.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageVideoPacketLossRate? AverageVideoPacketLossRate
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageVideoPacketLossRate?>("averageVideoPacketLossRate"); }
            set { BackingStore?.Set("averageVideoPacketLossRate", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageVideoPacketLossRate AverageVideoPacketLossRate
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageVideoPacketLossRate>("averageVideoPacketLossRate"); }
            set { BackingStore?.Set("averageVideoPacketLossRate", value); }
        }
#endif
        /// <summary>Stores model information.</summary>
        public IBackingStore BackingStore { get; private set; }
        /// <summary>UTC time when the stream ended. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. This field is only available for streams that use the SIP protocol.</summary>
        public DateTimeOffset? EndDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("endDateTime"); }
            set { BackingStore?.Set("endDateTime", value); }
        }
        /// <summary>Indicates whether the forward error correction (FEC) was used at some point during the session. The default value is null.</summary>
        public bool? IsAudioForwardErrorCorrectionUsed
        {
            get { return BackingStore?.Get<bool?>("isAudioForwardErrorCorrectionUsed"); }
            set { BackingStore?.Set("isAudioForwardErrorCorrectionUsed", value); }
        }
        /// <summary>Fraction of the call where frame rate is less than 7.5 frames per second.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_lowFrameRateRatio? LowFrameRateRatio
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_lowFrameRateRatio?>("lowFrameRateRatio"); }
            set { BackingStore?.Set("lowFrameRateRatio", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_lowFrameRateRatio LowFrameRateRatio
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_lowFrameRateRatio>("lowFrameRateRatio"); }
            set { BackingStore?.Set("lowFrameRateRatio", value); }
        }
#endif
        /// <summary>Fraction of the call that the client is running less than 70% expected video processing capability.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_lowVideoProcessingCapabilityRatio? LowVideoProcessingCapabilityRatio
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_lowVideoProcessingCapabilityRatio?>("lowVideoProcessingCapabilityRatio"); }
            set { BackingStore?.Set("lowVideoProcessingCapabilityRatio", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_lowVideoProcessingCapabilityRatio LowVideoProcessingCapabilityRatio
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_lowVideoProcessingCapabilityRatio>("lowVideoProcessingCapabilityRatio"); }
            set { BackingStore?.Set("lowVideoProcessingCapabilityRatio", value); }
        }
#endif
        /// <summary>Maximum of audio network jitter computed over each of the 20 second windows during the session, denoted in ISO 8601 format. For example, 1 second is denoted as &apos;PT1S&apos;, where &apos;P&apos; is the duration designator, &apos;T&apos; is the time designator, and &apos;S&apos; is the second designator.</summary>
        public TimeSpan? MaxAudioNetworkJitter
        {
            get { return BackingStore?.Get<TimeSpan?>("maxAudioNetworkJitter"); }
            set { BackingStore?.Set("maxAudioNetworkJitter", value); }
        }
        /// <summary>Maximum jitter for the stream computed as specified in RFC 3550, denoted in ISO 8601 format. For example, 1 second is denoted as &apos;PT1S&apos;, where &apos;P&apos; is the duration designator, &apos;T&apos; is the time designator, and &apos;S&apos; is the second designator.</summary>
        public TimeSpan? MaxJitter
        {
            get { return BackingStore?.Get<TimeSpan?>("maxJitter"); }
            set { BackingStore?.Set("maxJitter", value); }
        }
        /// <summary>Maximum packet loss rate for the stream.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_maxPacketLossRate? MaxPacketLossRate
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_maxPacketLossRate?>("maxPacketLossRate"); }
            set { BackingStore?.Set("maxPacketLossRate", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_maxPacketLossRate MaxPacketLossRate
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_maxPacketLossRate>("maxPacketLossRate"); }
            set { BackingStore?.Set("maxPacketLossRate", value); }
        }
#endif
        /// <summary>Maximum ratio of packets concealed by the healer.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_maxRatioOfConcealedSamples? MaxRatioOfConcealedSamples
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_maxRatioOfConcealedSamples?>("maxRatioOfConcealedSamples"); }
            set { BackingStore?.Set("maxRatioOfConcealedSamples", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_maxRatioOfConcealedSamples MaxRatioOfConcealedSamples
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_maxRatioOfConcealedSamples>("maxRatioOfConcealedSamples"); }
            set { BackingStore?.Set("maxRatioOfConcealedSamples", value); }
        }
#endif
        /// <summary>Maximum network propagation round-trip time computed as specified in RFC 3550, denoted in ISO 8601 format. For example, 1 second is denoted as &apos;PT1S&apos;, where &apos;P&apos; is the duration designator, &apos;T&apos; is the time designator, and &apos;S&apos; is the second designator.</summary>
        public TimeSpan? MaxRoundTripTime
        {
            get { return BackingStore?.Get<TimeSpan?>("maxRoundTripTime"); }
            set { BackingStore?.Set("maxRoundTripTime", value); }
        }
        /// <summary>The OdataType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OdataType
        {
            get { return BackingStore?.Get<string?>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#nullable restore
#else
        public string OdataType
        {
            get { return BackingStore?.Get<string>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#endif
        /// <summary>Packet count for the stream.</summary>
        public long? PacketUtilization
        {
            get { return BackingStore?.Get<long?>("packetUtilization"); }
            set { BackingStore?.Set("packetUtilization", value); }
        }
        /// <summary>Packet loss rate after FEC has been applied aggregated across all video streams and codecs.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_postForwardErrorCorrectionPacketLossRate? PostForwardErrorCorrectionPacketLossRate
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_postForwardErrorCorrectionPacketLossRate?>("postForwardErrorCorrectionPacketLossRate"); }
            set { BackingStore?.Set("postForwardErrorCorrectionPacketLossRate", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_postForwardErrorCorrectionPacketLossRate PostForwardErrorCorrectionPacketLossRate
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_postForwardErrorCorrectionPacketLossRate>("postForwardErrorCorrectionPacketLossRate"); }
            set { BackingStore?.Set("postForwardErrorCorrectionPacketLossRate", value); }
        }
#endif
        /// <summary>Average duration of the received freezing time in the video stream represented in root mean square.</summary>
        public TimeSpan? RmsFreezeDuration
        {
            get { return BackingStore?.Get<TimeSpan?>("rmsFreezeDuration"); }
            set { BackingStore?.Set("rmsFreezeDuration", value); }
        }
        /// <summary>UTC time when the stream started. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. This field is only available for streams that use the SIP protocol.</summary>
        public DateTimeOffset? StartDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("startDateTime"); }
            set { BackingStore?.Set("startDateTime", value); }
        }
        /// <summary>The streamDirection property</summary>
        public global::Microsoft.Graph.Models.CallRecords.MediaStreamDirection? StreamDirection
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.CallRecords.MediaStreamDirection?>("streamDirection"); }
            set { BackingStore?.Set("streamDirection", value); }
        }
        /// <summary>Unique identifier for the stream.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StreamId
        {
            get { return BackingStore?.Get<string?>("streamId"); }
            set { BackingStore?.Set("streamId", value); }
        }
#nullable restore
#else
        public string StreamId
        {
            get { return BackingStore?.Get<string>("streamId"); }
            set { BackingStore?.Set("streamId", value); }
        }
#endif
        /// <summary>Codec name used to encode video for transmission on the network. Possible values are: unknown, invalid, av1, h263, h264, h264s, h264uc, h265, rtvc1, rtVideo, xrtvc1, unknownFutureValue.</summary>
        public global::Microsoft.Graph.Models.CallRecords.VideoCodec? VideoCodec
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.CallRecords.VideoCodec?>("videoCodec"); }
            set { BackingStore?.Set("videoCodec", value); }
        }
        /// <summary>True if the media stream bypassed the Mediation Server and went straight between client and PSTN Gateway/PBX, false otherwise.</summary>
        public bool? WasMediaBypassed
        {
            get { return BackingStore?.Get<bool?>("wasMediaBypassed"); }
            set { BackingStore?.Set("wasMediaBypassed", value); }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Microsoft.Graph.Models.CallRecords.MediaStream"/> and sets the default values.
        /// </summary>
        public MediaStream()
        {
            BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Models.CallRecords.MediaStream"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Microsoft.Graph.Models.CallRecords.MediaStream CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Models.CallRecords.MediaStream();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "audioCodec", n => { AudioCodec = n.GetEnumValue<global::Microsoft.Graph.Models.CallRecords.AudioCodec>(); } },
                { "averageAudioDegradation", n => { AverageAudioDegradation = n.GetObjectValue<global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageAudioDegradation>(global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageAudioDegradation.CreateFromDiscriminatorValue); } },
                { "averageAudioNetworkJitter", n => { AverageAudioNetworkJitter = n.GetTimeSpanValue(); } },
                { "averageBandwidthEstimate", n => { AverageBandwidthEstimate = n.GetLongValue(); } },
                { "averageFreezeDuration", n => { AverageFreezeDuration = n.GetTimeSpanValue(); } },
                { "averageJitter", n => { AverageJitter = n.GetTimeSpanValue(); } },
                { "averagePacketLossRate", n => { AveragePacketLossRate = n.GetObjectValue<global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averagePacketLossRate>(global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averagePacketLossRate.CreateFromDiscriminatorValue); } },
                { "averageRatioOfConcealedSamples", n => { AverageRatioOfConcealedSamples = n.GetObjectValue<global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageRatioOfConcealedSamples>(global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageRatioOfConcealedSamples.CreateFromDiscriminatorValue); } },
                { "averageReceivedFrameRate", n => { AverageReceivedFrameRate = n.GetObjectValue<global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageReceivedFrameRate>(global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageReceivedFrameRate.CreateFromDiscriminatorValue); } },
                { "averageRoundTripTime", n => { AverageRoundTripTime = n.GetTimeSpanValue(); } },
                { "averageVideoFrameLossPercentage", n => { AverageVideoFrameLossPercentage = n.GetObjectValue<global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageVideoFrameLossPercentage>(global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageVideoFrameLossPercentage.CreateFromDiscriminatorValue); } },
                { "averageVideoFrameRate", n => { AverageVideoFrameRate = n.GetObjectValue<global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageVideoFrameRate>(global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageVideoFrameRate.CreateFromDiscriminatorValue); } },
                { "averageVideoPacketLossRate", n => { AverageVideoPacketLossRate = n.GetObjectValue<global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageVideoPacketLossRate>(global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageVideoPacketLossRate.CreateFromDiscriminatorValue); } },
                { "endDateTime", n => { EndDateTime = n.GetDateTimeOffsetValue(); } },
                { "isAudioForwardErrorCorrectionUsed", n => { IsAudioForwardErrorCorrectionUsed = n.GetBoolValue(); } },
                { "lowFrameRateRatio", n => { LowFrameRateRatio = n.GetObjectValue<global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_lowFrameRateRatio>(global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_lowFrameRateRatio.CreateFromDiscriminatorValue); } },
                { "lowVideoProcessingCapabilityRatio", n => { LowVideoProcessingCapabilityRatio = n.GetObjectValue<global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_lowVideoProcessingCapabilityRatio>(global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_lowVideoProcessingCapabilityRatio.CreateFromDiscriminatorValue); } },
                { "maxAudioNetworkJitter", n => { MaxAudioNetworkJitter = n.GetTimeSpanValue(); } },
                { "maxJitter", n => { MaxJitter = n.GetTimeSpanValue(); } },
                { "maxPacketLossRate", n => { MaxPacketLossRate = n.GetObjectValue<global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_maxPacketLossRate>(global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_maxPacketLossRate.CreateFromDiscriminatorValue); } },
                { "maxRatioOfConcealedSamples", n => { MaxRatioOfConcealedSamples = n.GetObjectValue<global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_maxRatioOfConcealedSamples>(global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_maxRatioOfConcealedSamples.CreateFromDiscriminatorValue); } },
                { "maxRoundTripTime", n => { MaxRoundTripTime = n.GetTimeSpanValue(); } },
                { "@odata.type", n => { OdataType = n.GetStringValue(); } },
                { "packetUtilization", n => { PacketUtilization = n.GetLongValue(); } },
                { "postForwardErrorCorrectionPacketLossRate", n => { PostForwardErrorCorrectionPacketLossRate = n.GetObjectValue<global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_postForwardErrorCorrectionPacketLossRate>(global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_postForwardErrorCorrectionPacketLossRate.CreateFromDiscriminatorValue); } },
                { "rmsFreezeDuration", n => { RmsFreezeDuration = n.GetTimeSpanValue(); } },
                { "startDateTime", n => { StartDateTime = n.GetDateTimeOffsetValue(); } },
                { "streamDirection", n => { StreamDirection = n.GetEnumValue<global::Microsoft.Graph.Models.CallRecords.MediaStreamDirection>(); } },
                { "streamId", n => { StreamId = n.GetStringValue(); } },
                { "videoCodec", n => { VideoCodec = n.GetEnumValue<global::Microsoft.Graph.Models.CallRecords.VideoCodec>(); } },
                { "wasMediaBypassed", n => { WasMediaBypassed = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::Microsoft.Graph.Models.CallRecords.AudioCodec>("audioCodec", AudioCodec);
            writer.WriteObjectValue<global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageAudioDegradation>("averageAudioDegradation", AverageAudioDegradation);
            writer.WriteTimeSpanValue("averageAudioNetworkJitter", AverageAudioNetworkJitter);
            writer.WriteLongValue("averageBandwidthEstimate", AverageBandwidthEstimate);
            writer.WriteTimeSpanValue("averageFreezeDuration", AverageFreezeDuration);
            writer.WriteTimeSpanValue("averageJitter", AverageJitter);
            writer.WriteObjectValue<global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averagePacketLossRate>("averagePacketLossRate", AveragePacketLossRate);
            writer.WriteObjectValue<global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageRatioOfConcealedSamples>("averageRatioOfConcealedSamples", AverageRatioOfConcealedSamples);
            writer.WriteObjectValue<global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageReceivedFrameRate>("averageReceivedFrameRate", AverageReceivedFrameRate);
            writer.WriteTimeSpanValue("averageRoundTripTime", AverageRoundTripTime);
            writer.WriteObjectValue<global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageVideoFrameLossPercentage>("averageVideoFrameLossPercentage", AverageVideoFrameLossPercentage);
            writer.WriteObjectValue<global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageVideoFrameRate>("averageVideoFrameRate", AverageVideoFrameRate);
            writer.WriteObjectValue<global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageVideoPacketLossRate>("averageVideoPacketLossRate", AverageVideoPacketLossRate);
            writer.WriteDateTimeOffsetValue("endDateTime", EndDateTime);
            writer.WriteBoolValue("isAudioForwardErrorCorrectionUsed", IsAudioForwardErrorCorrectionUsed);
            writer.WriteObjectValue<global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_lowFrameRateRatio>("lowFrameRateRatio", LowFrameRateRatio);
            writer.WriteObjectValue<global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_lowVideoProcessingCapabilityRatio>("lowVideoProcessingCapabilityRatio", LowVideoProcessingCapabilityRatio);
            writer.WriteTimeSpanValue("maxAudioNetworkJitter", MaxAudioNetworkJitter);
            writer.WriteTimeSpanValue("maxJitter", MaxJitter);
            writer.WriteObjectValue<global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_maxPacketLossRate>("maxPacketLossRate", MaxPacketLossRate);
            writer.WriteObjectValue<global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_maxRatioOfConcealedSamples>("maxRatioOfConcealedSamples", MaxRatioOfConcealedSamples);
            writer.WriteTimeSpanValue("maxRoundTripTime", MaxRoundTripTime);
            writer.WriteStringValue("@odata.type", OdataType);
            writer.WriteLongValue("packetUtilization", PacketUtilization);
            writer.WriteObjectValue<global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_postForwardErrorCorrectionPacketLossRate>("postForwardErrorCorrectionPacketLossRate", PostForwardErrorCorrectionPacketLossRate);
            writer.WriteTimeSpanValue("rmsFreezeDuration", RmsFreezeDuration);
            writer.WriteDateTimeOffsetValue("startDateTime", StartDateTime);
            writer.WriteEnumValue<global::Microsoft.Graph.Models.CallRecords.MediaStreamDirection>("streamDirection", StreamDirection);
            writer.WriteStringValue("streamId", StreamId);
            writer.WriteEnumValue<global::Microsoft.Graph.Models.CallRecords.VideoCodec>("videoCodec", VideoCodec);
            writer.WriteBoolValue("wasMediaBypassed", WasMediaBypassed);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="float"/>, <see cref="global::Microsoft.Graph.Models.ReferenceNumeric"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.20.0")]
        public partial class MediaStream_averageAudioDegradation : IBackedModel, IComposedTypeWrapper, IParsable
        {
            /// <summary>Stores model information.</summary>
            public IBackingStore BackingStore { get; private set; }
            /// <summary>Composed type representation for type <see cref="float"/></summary>
            public float? Float
            {
                get { return BackingStore?.Get<float?>("float"); }
                set { BackingStore?.Set("float", value); }
            }
            /// <summary>Composed type representation for type <see cref="global::Microsoft.Graph.Models.ReferenceNumeric"/></summary>
            public global::Microsoft.Graph.Models.ReferenceNumeric? ReferenceNumeric
            {
                get { return BackingStore?.Get<global::Microsoft.Graph.Models.ReferenceNumeric?>("ReferenceNumeric"); }
                set { BackingStore?.Set("ReferenceNumeric", value); }
            }
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String
            {
                get { return BackingStore?.Get<string?>("string"); }
                set { BackingStore?.Set("string", value); }
            }
#nullable restore
#else
            public string String
            {
                get { return BackingStore?.Get<string>("string"); }
                set { BackingStore?.Set("string", value); }
            }
#endif
            /// <summary>
            /// Instantiates a new <see cref="global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageAudioDegradation"/> and sets the default values.
            /// </summary>
            public MediaStream_averageAudioDegradation()
            {
                BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
            }
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageAudioDegradation"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageAudioDegradation CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageAudioDegradation();
                if(parseNode.GetEnumValue<global::Microsoft.Graph.Models.ReferenceNumeric>() is global::Microsoft.Graph.Models.ReferenceNumeric referenceNumericValue)
                {
                    result.ReferenceNumeric = referenceNumericValue;
                }
                else if(parseNode.GetFloatValue() is float floatValue)
                {
                    result.Float = floatValue;
                }
                else if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(ReferenceNumeric != null)
                {
                    writer.WriteEnumValue<global::Microsoft.Graph.Models.ReferenceNumeric>(null, ReferenceNumeric);
                }
                else if(Float != null)
                {
                    writer.WriteFloatValue(null, Float);
                }
                else if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="float"/>, <see cref="global::Microsoft.Graph.Models.ReferenceNumeric"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.20.0")]
        public partial class MediaStream_averagePacketLossRate : IBackedModel, IComposedTypeWrapper, IParsable
        {
            /// <summary>Stores model information.</summary>
            public IBackingStore BackingStore { get; private set; }
            /// <summary>Composed type representation for type <see cref="float"/></summary>
            public float? Float
            {
                get { return BackingStore?.Get<float?>("float"); }
                set { BackingStore?.Set("float", value); }
            }
            /// <summary>Composed type representation for type <see cref="global::Microsoft.Graph.Models.ReferenceNumeric"/></summary>
            public global::Microsoft.Graph.Models.ReferenceNumeric? ReferenceNumeric
            {
                get { return BackingStore?.Get<global::Microsoft.Graph.Models.ReferenceNumeric?>("ReferenceNumeric"); }
                set { BackingStore?.Set("ReferenceNumeric", value); }
            }
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String
            {
                get { return BackingStore?.Get<string?>("string"); }
                set { BackingStore?.Set("string", value); }
            }
#nullable restore
#else
            public string String
            {
                get { return BackingStore?.Get<string>("string"); }
                set { BackingStore?.Set("string", value); }
            }
#endif
            /// <summary>
            /// Instantiates a new <see cref="global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averagePacketLossRate"/> and sets the default values.
            /// </summary>
            public MediaStream_averagePacketLossRate()
            {
                BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
            }
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averagePacketLossRate"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averagePacketLossRate CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averagePacketLossRate();
                if(parseNode.GetEnumValue<global::Microsoft.Graph.Models.ReferenceNumeric>() is global::Microsoft.Graph.Models.ReferenceNumeric referenceNumericValue)
                {
                    result.ReferenceNumeric = referenceNumericValue;
                }
                else if(parseNode.GetFloatValue() is float floatValue)
                {
                    result.Float = floatValue;
                }
                else if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(ReferenceNumeric != null)
                {
                    writer.WriteEnumValue<global::Microsoft.Graph.Models.ReferenceNumeric>(null, ReferenceNumeric);
                }
                else if(Float != null)
                {
                    writer.WriteFloatValue(null, Float);
                }
                else if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="float"/>, <see cref="global::Microsoft.Graph.Models.ReferenceNumeric"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.20.0")]
        public partial class MediaStream_averageRatioOfConcealedSamples : IBackedModel, IComposedTypeWrapper, IParsable
        {
            /// <summary>Stores model information.</summary>
            public IBackingStore BackingStore { get; private set; }
            /// <summary>Composed type representation for type <see cref="float"/></summary>
            public float? Float
            {
                get { return BackingStore?.Get<float?>("float"); }
                set { BackingStore?.Set("float", value); }
            }
            /// <summary>Composed type representation for type <see cref="global::Microsoft.Graph.Models.ReferenceNumeric"/></summary>
            public global::Microsoft.Graph.Models.ReferenceNumeric? ReferenceNumeric
            {
                get { return BackingStore?.Get<global::Microsoft.Graph.Models.ReferenceNumeric?>("ReferenceNumeric"); }
                set { BackingStore?.Set("ReferenceNumeric", value); }
            }
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String
            {
                get { return BackingStore?.Get<string?>("string"); }
                set { BackingStore?.Set("string", value); }
            }
#nullable restore
#else
            public string String
            {
                get { return BackingStore?.Get<string>("string"); }
                set { BackingStore?.Set("string", value); }
            }
#endif
            /// <summary>
            /// Instantiates a new <see cref="global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageRatioOfConcealedSamples"/> and sets the default values.
            /// </summary>
            public MediaStream_averageRatioOfConcealedSamples()
            {
                BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
            }
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageRatioOfConcealedSamples"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageRatioOfConcealedSamples CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageRatioOfConcealedSamples();
                if(parseNode.GetEnumValue<global::Microsoft.Graph.Models.ReferenceNumeric>() is global::Microsoft.Graph.Models.ReferenceNumeric referenceNumericValue)
                {
                    result.ReferenceNumeric = referenceNumericValue;
                }
                else if(parseNode.GetFloatValue() is float floatValue)
                {
                    result.Float = floatValue;
                }
                else if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(ReferenceNumeric != null)
                {
                    writer.WriteEnumValue<global::Microsoft.Graph.Models.ReferenceNumeric>(null, ReferenceNumeric);
                }
                else if(Float != null)
                {
                    writer.WriteFloatValue(null, Float);
                }
                else if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="float"/>, <see cref="global::Microsoft.Graph.Models.ReferenceNumeric"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.20.0")]
        public partial class MediaStream_averageReceivedFrameRate : IBackedModel, IComposedTypeWrapper, IParsable
        {
            /// <summary>Stores model information.</summary>
            public IBackingStore BackingStore { get; private set; }
            /// <summary>Composed type representation for type <see cref="float"/></summary>
            public float? Float
            {
                get { return BackingStore?.Get<float?>("float"); }
                set { BackingStore?.Set("float", value); }
            }
            /// <summary>Composed type representation for type <see cref="global::Microsoft.Graph.Models.ReferenceNumeric"/></summary>
            public global::Microsoft.Graph.Models.ReferenceNumeric? ReferenceNumeric
            {
                get { return BackingStore?.Get<global::Microsoft.Graph.Models.ReferenceNumeric?>("ReferenceNumeric"); }
                set { BackingStore?.Set("ReferenceNumeric", value); }
            }
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String
            {
                get { return BackingStore?.Get<string?>("string"); }
                set { BackingStore?.Set("string", value); }
            }
#nullable restore
#else
            public string String
            {
                get { return BackingStore?.Get<string>("string"); }
                set { BackingStore?.Set("string", value); }
            }
#endif
            /// <summary>
            /// Instantiates a new <see cref="global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageReceivedFrameRate"/> and sets the default values.
            /// </summary>
            public MediaStream_averageReceivedFrameRate()
            {
                BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
            }
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageReceivedFrameRate"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageReceivedFrameRate CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageReceivedFrameRate();
                if(parseNode.GetEnumValue<global::Microsoft.Graph.Models.ReferenceNumeric>() is global::Microsoft.Graph.Models.ReferenceNumeric referenceNumericValue)
                {
                    result.ReferenceNumeric = referenceNumericValue;
                }
                else if(parseNode.GetFloatValue() is float floatValue)
                {
                    result.Float = floatValue;
                }
                else if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(ReferenceNumeric != null)
                {
                    writer.WriteEnumValue<global::Microsoft.Graph.Models.ReferenceNumeric>(null, ReferenceNumeric);
                }
                else if(Float != null)
                {
                    writer.WriteFloatValue(null, Float);
                }
                else if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="float"/>, <see cref="global::Microsoft.Graph.Models.ReferenceNumeric"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.20.0")]
        public partial class MediaStream_averageVideoFrameLossPercentage : IBackedModel, IComposedTypeWrapper, IParsable
        {
            /// <summary>Stores model information.</summary>
            public IBackingStore BackingStore { get; private set; }
            /// <summary>Composed type representation for type <see cref="float"/></summary>
            public float? Float
            {
                get { return BackingStore?.Get<float?>("float"); }
                set { BackingStore?.Set("float", value); }
            }
            /// <summary>Composed type representation for type <see cref="global::Microsoft.Graph.Models.ReferenceNumeric"/></summary>
            public global::Microsoft.Graph.Models.ReferenceNumeric? ReferenceNumeric
            {
                get { return BackingStore?.Get<global::Microsoft.Graph.Models.ReferenceNumeric?>("ReferenceNumeric"); }
                set { BackingStore?.Set("ReferenceNumeric", value); }
            }
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String
            {
                get { return BackingStore?.Get<string?>("string"); }
                set { BackingStore?.Set("string", value); }
            }
#nullable restore
#else
            public string String
            {
                get { return BackingStore?.Get<string>("string"); }
                set { BackingStore?.Set("string", value); }
            }
#endif
            /// <summary>
            /// Instantiates a new <see cref="global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageVideoFrameLossPercentage"/> and sets the default values.
            /// </summary>
            public MediaStream_averageVideoFrameLossPercentage()
            {
                BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
            }
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageVideoFrameLossPercentage"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageVideoFrameLossPercentage CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageVideoFrameLossPercentage();
                if(parseNode.GetEnumValue<global::Microsoft.Graph.Models.ReferenceNumeric>() is global::Microsoft.Graph.Models.ReferenceNumeric referenceNumericValue)
                {
                    result.ReferenceNumeric = referenceNumericValue;
                }
                else if(parseNode.GetFloatValue() is float floatValue)
                {
                    result.Float = floatValue;
                }
                else if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(ReferenceNumeric != null)
                {
                    writer.WriteEnumValue<global::Microsoft.Graph.Models.ReferenceNumeric>(null, ReferenceNumeric);
                }
                else if(Float != null)
                {
                    writer.WriteFloatValue(null, Float);
                }
                else if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="float"/>, <see cref="global::Microsoft.Graph.Models.ReferenceNumeric"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.20.0")]
        public partial class MediaStream_averageVideoFrameRate : IBackedModel, IComposedTypeWrapper, IParsable
        {
            /// <summary>Stores model information.</summary>
            public IBackingStore BackingStore { get; private set; }
            /// <summary>Composed type representation for type <see cref="float"/></summary>
            public float? Float
            {
                get { return BackingStore?.Get<float?>("float"); }
                set { BackingStore?.Set("float", value); }
            }
            /// <summary>Composed type representation for type <see cref="global::Microsoft.Graph.Models.ReferenceNumeric"/></summary>
            public global::Microsoft.Graph.Models.ReferenceNumeric? ReferenceNumeric
            {
                get { return BackingStore?.Get<global::Microsoft.Graph.Models.ReferenceNumeric?>("ReferenceNumeric"); }
                set { BackingStore?.Set("ReferenceNumeric", value); }
            }
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String
            {
                get { return BackingStore?.Get<string?>("string"); }
                set { BackingStore?.Set("string", value); }
            }
#nullable restore
#else
            public string String
            {
                get { return BackingStore?.Get<string>("string"); }
                set { BackingStore?.Set("string", value); }
            }
#endif
            /// <summary>
            /// Instantiates a new <see cref="global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageVideoFrameRate"/> and sets the default values.
            /// </summary>
            public MediaStream_averageVideoFrameRate()
            {
                BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
            }
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageVideoFrameRate"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageVideoFrameRate CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageVideoFrameRate();
                if(parseNode.GetEnumValue<global::Microsoft.Graph.Models.ReferenceNumeric>() is global::Microsoft.Graph.Models.ReferenceNumeric referenceNumericValue)
                {
                    result.ReferenceNumeric = referenceNumericValue;
                }
                else if(parseNode.GetFloatValue() is float floatValue)
                {
                    result.Float = floatValue;
                }
                else if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(ReferenceNumeric != null)
                {
                    writer.WriteEnumValue<global::Microsoft.Graph.Models.ReferenceNumeric>(null, ReferenceNumeric);
                }
                else if(Float != null)
                {
                    writer.WriteFloatValue(null, Float);
                }
                else if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="float"/>, <see cref="global::Microsoft.Graph.Models.ReferenceNumeric"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.20.0")]
        public partial class MediaStream_averageVideoPacketLossRate : IBackedModel, IComposedTypeWrapper, IParsable
        {
            /// <summary>Stores model information.</summary>
            public IBackingStore BackingStore { get; private set; }
            /// <summary>Composed type representation for type <see cref="float"/></summary>
            public float? Float
            {
                get { return BackingStore?.Get<float?>("float"); }
                set { BackingStore?.Set("float", value); }
            }
            /// <summary>Composed type representation for type <see cref="global::Microsoft.Graph.Models.ReferenceNumeric"/></summary>
            public global::Microsoft.Graph.Models.ReferenceNumeric? ReferenceNumeric
            {
                get { return BackingStore?.Get<global::Microsoft.Graph.Models.ReferenceNumeric?>("ReferenceNumeric"); }
                set { BackingStore?.Set("ReferenceNumeric", value); }
            }
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String
            {
                get { return BackingStore?.Get<string?>("string"); }
                set { BackingStore?.Set("string", value); }
            }
#nullable restore
#else
            public string String
            {
                get { return BackingStore?.Get<string>("string"); }
                set { BackingStore?.Set("string", value); }
            }
#endif
            /// <summary>
            /// Instantiates a new <see cref="global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageVideoPacketLossRate"/> and sets the default values.
            /// </summary>
            public MediaStream_averageVideoPacketLossRate()
            {
                BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
            }
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageVideoPacketLossRate"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageVideoPacketLossRate CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_averageVideoPacketLossRate();
                if(parseNode.GetEnumValue<global::Microsoft.Graph.Models.ReferenceNumeric>() is global::Microsoft.Graph.Models.ReferenceNumeric referenceNumericValue)
                {
                    result.ReferenceNumeric = referenceNumericValue;
                }
                else if(parseNode.GetFloatValue() is float floatValue)
                {
                    result.Float = floatValue;
                }
                else if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(ReferenceNumeric != null)
                {
                    writer.WriteEnumValue<global::Microsoft.Graph.Models.ReferenceNumeric>(null, ReferenceNumeric);
                }
                else if(Float != null)
                {
                    writer.WriteFloatValue(null, Float);
                }
                else if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="float"/>, <see cref="global::Microsoft.Graph.Models.ReferenceNumeric"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.20.0")]
        public partial class MediaStream_lowFrameRateRatio : IBackedModel, IComposedTypeWrapper, IParsable
        {
            /// <summary>Stores model information.</summary>
            public IBackingStore BackingStore { get; private set; }
            /// <summary>Composed type representation for type <see cref="float"/></summary>
            public float? Float
            {
                get { return BackingStore?.Get<float?>("float"); }
                set { BackingStore?.Set("float", value); }
            }
            /// <summary>Composed type representation for type <see cref="global::Microsoft.Graph.Models.ReferenceNumeric"/></summary>
            public global::Microsoft.Graph.Models.ReferenceNumeric? ReferenceNumeric
            {
                get { return BackingStore?.Get<global::Microsoft.Graph.Models.ReferenceNumeric?>("ReferenceNumeric"); }
                set { BackingStore?.Set("ReferenceNumeric", value); }
            }
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String
            {
                get { return BackingStore?.Get<string?>("string"); }
                set { BackingStore?.Set("string", value); }
            }
#nullable restore
#else
            public string String
            {
                get { return BackingStore?.Get<string>("string"); }
                set { BackingStore?.Set("string", value); }
            }
#endif
            /// <summary>
            /// Instantiates a new <see cref="global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_lowFrameRateRatio"/> and sets the default values.
            /// </summary>
            public MediaStream_lowFrameRateRatio()
            {
                BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
            }
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_lowFrameRateRatio"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_lowFrameRateRatio CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_lowFrameRateRatio();
                if(parseNode.GetEnumValue<global::Microsoft.Graph.Models.ReferenceNumeric>() is global::Microsoft.Graph.Models.ReferenceNumeric referenceNumericValue)
                {
                    result.ReferenceNumeric = referenceNumericValue;
                }
                else if(parseNode.GetFloatValue() is float floatValue)
                {
                    result.Float = floatValue;
                }
                else if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(ReferenceNumeric != null)
                {
                    writer.WriteEnumValue<global::Microsoft.Graph.Models.ReferenceNumeric>(null, ReferenceNumeric);
                }
                else if(Float != null)
                {
                    writer.WriteFloatValue(null, Float);
                }
                else if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="float"/>, <see cref="global::Microsoft.Graph.Models.ReferenceNumeric"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.20.0")]
        public partial class MediaStream_lowVideoProcessingCapabilityRatio : IBackedModel, IComposedTypeWrapper, IParsable
        {
            /// <summary>Stores model information.</summary>
            public IBackingStore BackingStore { get; private set; }
            /// <summary>Composed type representation for type <see cref="float"/></summary>
            public float? Float
            {
                get { return BackingStore?.Get<float?>("float"); }
                set { BackingStore?.Set("float", value); }
            }
            /// <summary>Composed type representation for type <see cref="global::Microsoft.Graph.Models.ReferenceNumeric"/></summary>
            public global::Microsoft.Graph.Models.ReferenceNumeric? ReferenceNumeric
            {
                get { return BackingStore?.Get<global::Microsoft.Graph.Models.ReferenceNumeric?>("ReferenceNumeric"); }
                set { BackingStore?.Set("ReferenceNumeric", value); }
            }
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String
            {
                get { return BackingStore?.Get<string?>("string"); }
                set { BackingStore?.Set("string", value); }
            }
#nullable restore
#else
            public string String
            {
                get { return BackingStore?.Get<string>("string"); }
                set { BackingStore?.Set("string", value); }
            }
#endif
            /// <summary>
            /// Instantiates a new <see cref="global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_lowVideoProcessingCapabilityRatio"/> and sets the default values.
            /// </summary>
            public MediaStream_lowVideoProcessingCapabilityRatio()
            {
                BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
            }
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_lowVideoProcessingCapabilityRatio"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_lowVideoProcessingCapabilityRatio CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_lowVideoProcessingCapabilityRatio();
                if(parseNode.GetEnumValue<global::Microsoft.Graph.Models.ReferenceNumeric>() is global::Microsoft.Graph.Models.ReferenceNumeric referenceNumericValue)
                {
                    result.ReferenceNumeric = referenceNumericValue;
                }
                else if(parseNode.GetFloatValue() is float floatValue)
                {
                    result.Float = floatValue;
                }
                else if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(ReferenceNumeric != null)
                {
                    writer.WriteEnumValue<global::Microsoft.Graph.Models.ReferenceNumeric>(null, ReferenceNumeric);
                }
                else if(Float != null)
                {
                    writer.WriteFloatValue(null, Float);
                }
                else if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="float"/>, <see cref="global::Microsoft.Graph.Models.ReferenceNumeric"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.20.0")]
        public partial class MediaStream_maxPacketLossRate : IBackedModel, IComposedTypeWrapper, IParsable
        {
            /// <summary>Stores model information.</summary>
            public IBackingStore BackingStore { get; private set; }
            /// <summary>Composed type representation for type <see cref="float"/></summary>
            public float? Float
            {
                get { return BackingStore?.Get<float?>("float"); }
                set { BackingStore?.Set("float", value); }
            }
            /// <summary>Composed type representation for type <see cref="global::Microsoft.Graph.Models.ReferenceNumeric"/></summary>
            public global::Microsoft.Graph.Models.ReferenceNumeric? ReferenceNumeric
            {
                get { return BackingStore?.Get<global::Microsoft.Graph.Models.ReferenceNumeric?>("ReferenceNumeric"); }
                set { BackingStore?.Set("ReferenceNumeric", value); }
            }
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String
            {
                get { return BackingStore?.Get<string?>("string"); }
                set { BackingStore?.Set("string", value); }
            }
#nullable restore
#else
            public string String
            {
                get { return BackingStore?.Get<string>("string"); }
                set { BackingStore?.Set("string", value); }
            }
#endif
            /// <summary>
            /// Instantiates a new <see cref="global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_maxPacketLossRate"/> and sets the default values.
            /// </summary>
            public MediaStream_maxPacketLossRate()
            {
                BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
            }
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_maxPacketLossRate"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_maxPacketLossRate CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_maxPacketLossRate();
                if(parseNode.GetEnumValue<global::Microsoft.Graph.Models.ReferenceNumeric>() is global::Microsoft.Graph.Models.ReferenceNumeric referenceNumericValue)
                {
                    result.ReferenceNumeric = referenceNumericValue;
                }
                else if(parseNode.GetFloatValue() is float floatValue)
                {
                    result.Float = floatValue;
                }
                else if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(ReferenceNumeric != null)
                {
                    writer.WriteEnumValue<global::Microsoft.Graph.Models.ReferenceNumeric>(null, ReferenceNumeric);
                }
                else if(Float != null)
                {
                    writer.WriteFloatValue(null, Float);
                }
                else if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="float"/>, <see cref="global::Microsoft.Graph.Models.ReferenceNumeric"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.20.0")]
        public partial class MediaStream_maxRatioOfConcealedSamples : IBackedModel, IComposedTypeWrapper, IParsable
        {
            /// <summary>Stores model information.</summary>
            public IBackingStore BackingStore { get; private set; }
            /// <summary>Composed type representation for type <see cref="float"/></summary>
            public float? Float
            {
                get { return BackingStore?.Get<float?>("float"); }
                set { BackingStore?.Set("float", value); }
            }
            /// <summary>Composed type representation for type <see cref="global::Microsoft.Graph.Models.ReferenceNumeric"/></summary>
            public global::Microsoft.Graph.Models.ReferenceNumeric? ReferenceNumeric
            {
                get { return BackingStore?.Get<global::Microsoft.Graph.Models.ReferenceNumeric?>("ReferenceNumeric"); }
                set { BackingStore?.Set("ReferenceNumeric", value); }
            }
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String
            {
                get { return BackingStore?.Get<string?>("string"); }
                set { BackingStore?.Set("string", value); }
            }
#nullable restore
#else
            public string String
            {
                get { return BackingStore?.Get<string>("string"); }
                set { BackingStore?.Set("string", value); }
            }
#endif
            /// <summary>
            /// Instantiates a new <see cref="global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_maxRatioOfConcealedSamples"/> and sets the default values.
            /// </summary>
            public MediaStream_maxRatioOfConcealedSamples()
            {
                BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
            }
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_maxRatioOfConcealedSamples"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_maxRatioOfConcealedSamples CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_maxRatioOfConcealedSamples();
                if(parseNode.GetEnumValue<global::Microsoft.Graph.Models.ReferenceNumeric>() is global::Microsoft.Graph.Models.ReferenceNumeric referenceNumericValue)
                {
                    result.ReferenceNumeric = referenceNumericValue;
                }
                else if(parseNode.GetFloatValue() is float floatValue)
                {
                    result.Float = floatValue;
                }
                else if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(ReferenceNumeric != null)
                {
                    writer.WriteEnumValue<global::Microsoft.Graph.Models.ReferenceNumeric>(null, ReferenceNumeric);
                }
                else if(Float != null)
                {
                    writer.WriteFloatValue(null, Float);
                }
                else if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="float"/>, <see cref="global::Microsoft.Graph.Models.ReferenceNumeric"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.20.0")]
        public partial class MediaStream_postForwardErrorCorrectionPacketLossRate : IBackedModel, IComposedTypeWrapper, IParsable
        {
            /// <summary>Stores model information.</summary>
            public IBackingStore BackingStore { get; private set; }
            /// <summary>Composed type representation for type <see cref="float"/></summary>
            public float? Float
            {
                get { return BackingStore?.Get<float?>("float"); }
                set { BackingStore?.Set("float", value); }
            }
            /// <summary>Composed type representation for type <see cref="global::Microsoft.Graph.Models.ReferenceNumeric"/></summary>
            public global::Microsoft.Graph.Models.ReferenceNumeric? ReferenceNumeric
            {
                get { return BackingStore?.Get<global::Microsoft.Graph.Models.ReferenceNumeric?>("ReferenceNumeric"); }
                set { BackingStore?.Set("ReferenceNumeric", value); }
            }
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String
            {
                get { return BackingStore?.Get<string?>("string"); }
                set { BackingStore?.Set("string", value); }
            }
#nullable restore
#else
            public string String
            {
                get { return BackingStore?.Get<string>("string"); }
                set { BackingStore?.Set("string", value); }
            }
#endif
            /// <summary>
            /// Instantiates a new <see cref="global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_postForwardErrorCorrectionPacketLossRate"/> and sets the default values.
            /// </summary>
            public MediaStream_postForwardErrorCorrectionPacketLossRate()
            {
                BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
            }
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_postForwardErrorCorrectionPacketLossRate"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_postForwardErrorCorrectionPacketLossRate CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::Microsoft.Graph.Models.CallRecords.MediaStream.MediaStream_postForwardErrorCorrectionPacketLossRate();
                if(parseNode.GetEnumValue<global::Microsoft.Graph.Models.ReferenceNumeric>() is global::Microsoft.Graph.Models.ReferenceNumeric referenceNumericValue)
                {
                    result.ReferenceNumeric = referenceNumericValue;
                }
                else if(parseNode.GetFloatValue() is float floatValue)
                {
                    result.Float = floatValue;
                }
                else if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(ReferenceNumeric != null)
                {
                    writer.WriteEnumValue<global::Microsoft.Graph.Models.ReferenceNumeric>(null, ReferenceNumeric);
                }
                else if(Float != null)
                {
                    writer.WriteFloatValue(null, Float);
                }
                else if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
            }
        }
    }
}
#pragma warning restore CS0618
