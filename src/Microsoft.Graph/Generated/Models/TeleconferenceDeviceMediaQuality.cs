// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions.Store;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.20.0")]
    #pragma warning disable CS1591
    public partial class TeleconferenceDeviceMediaQuality : IAdditionalDataHolder, IBackedModel, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData
        {
            get { return BackingStore.Get<IDictionary<string, object>>("AdditionalData") ?? new Dictionary<string, object>(); }
            set { BackingStore.Set("AdditionalData", value); }
        }
        /// <summary>The average inbound stream network jitter.</summary>
        public TimeSpan? AverageInboundJitter
        {
            get { return BackingStore?.Get<TimeSpan?>("averageInboundJitter"); }
            set { BackingStore?.Set("averageInboundJitter", value); }
        }
        /// <summary>The average inbound stream packet loss rate in percentage (0-100). For example, 0.01 means 0.01%.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Models.TeleconferenceDeviceMediaQuality.TeleconferenceDeviceMediaQuality_averageInboundPacketLossRateInPercentage? AverageInboundPacketLossRateInPercentage
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.TeleconferenceDeviceMediaQuality.TeleconferenceDeviceMediaQuality_averageInboundPacketLossRateInPercentage?>("averageInboundPacketLossRateInPercentage"); }
            set { BackingStore?.Set("averageInboundPacketLossRateInPercentage", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Models.TeleconferenceDeviceMediaQuality.TeleconferenceDeviceMediaQuality_averageInboundPacketLossRateInPercentage AverageInboundPacketLossRateInPercentage
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.TeleconferenceDeviceMediaQuality.TeleconferenceDeviceMediaQuality_averageInboundPacketLossRateInPercentage>("averageInboundPacketLossRateInPercentage"); }
            set { BackingStore?.Set("averageInboundPacketLossRateInPercentage", value); }
        }
#endif
        /// <summary>The average inbound stream network round trip delay.</summary>
        public TimeSpan? AverageInboundRoundTripDelay
        {
            get { return BackingStore?.Get<TimeSpan?>("averageInboundRoundTripDelay"); }
            set { BackingStore?.Set("averageInboundRoundTripDelay", value); }
        }
        /// <summary>The average outbound stream network jitter.</summary>
        public TimeSpan? AverageOutboundJitter
        {
            get { return BackingStore?.Get<TimeSpan?>("averageOutboundJitter"); }
            set { BackingStore?.Set("averageOutboundJitter", value); }
        }
        /// <summary>The average outbound stream packet loss rate in percentage (0-100). For example, 0.01 means 0.01%.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Models.TeleconferenceDeviceMediaQuality.TeleconferenceDeviceMediaQuality_averageOutboundPacketLossRateInPercentage? AverageOutboundPacketLossRateInPercentage
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.TeleconferenceDeviceMediaQuality.TeleconferenceDeviceMediaQuality_averageOutboundPacketLossRateInPercentage?>("averageOutboundPacketLossRateInPercentage"); }
            set { BackingStore?.Set("averageOutboundPacketLossRateInPercentage", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Models.TeleconferenceDeviceMediaQuality.TeleconferenceDeviceMediaQuality_averageOutboundPacketLossRateInPercentage AverageOutboundPacketLossRateInPercentage
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.TeleconferenceDeviceMediaQuality.TeleconferenceDeviceMediaQuality_averageOutboundPacketLossRateInPercentage>("averageOutboundPacketLossRateInPercentage"); }
            set { BackingStore?.Set("averageOutboundPacketLossRateInPercentage", value); }
        }
#endif
        /// <summary>The average outbound stream network round trip delay.</summary>
        public TimeSpan? AverageOutboundRoundTripDelay
        {
            get { return BackingStore?.Get<TimeSpan?>("averageOutboundRoundTripDelay"); }
            set { BackingStore?.Set("averageOutboundRoundTripDelay", value); }
        }
        /// <summary>Stores model information.</summary>
        public IBackingStore BackingStore { get; private set; }
        /// <summary>The channel index of media. Indexing begins with 1.  If a media session contains 3 video modalities, channel indexes will be 1, 2, and 3.</summary>
        public int? ChannelIndex
        {
            get { return BackingStore?.Get<int?>("channelIndex"); }
            set { BackingStore?.Set("channelIndex", value); }
        }
        /// <summary>The total number of the inbound packets.</summary>
        public long? InboundPackets
        {
            get { return BackingStore?.Get<long?>("inboundPackets"); }
            set { BackingStore?.Set("inboundPackets", value); }
        }
        /// <summary>the local IP address for the media session.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LocalIPAddress
        {
            get { return BackingStore?.Get<string?>("localIPAddress"); }
            set { BackingStore?.Set("localIPAddress", value); }
        }
#nullable restore
#else
        public string LocalIPAddress
        {
            get { return BackingStore?.Get<string>("localIPAddress"); }
            set { BackingStore?.Set("localIPAddress", value); }
        }
#endif
        /// <summary>The local media port.</summary>
        public int? LocalPort
        {
            get { return BackingStore?.Get<int?>("localPort"); }
            set { BackingStore?.Set("localPort", value); }
        }
        /// <summary>The maximum inbound stream network jitter.</summary>
        public TimeSpan? MaximumInboundJitter
        {
            get { return BackingStore?.Get<TimeSpan?>("maximumInboundJitter"); }
            set { BackingStore?.Set("maximumInboundJitter", value); }
        }
        /// <summary>The maximum inbound stream packet loss rate in percentage (0-100). For example, 0.01 means 0.01%.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Models.TeleconferenceDeviceMediaQuality.TeleconferenceDeviceMediaQuality_maximumInboundPacketLossRateInPercentage? MaximumInboundPacketLossRateInPercentage
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.TeleconferenceDeviceMediaQuality.TeleconferenceDeviceMediaQuality_maximumInboundPacketLossRateInPercentage?>("maximumInboundPacketLossRateInPercentage"); }
            set { BackingStore?.Set("maximumInboundPacketLossRateInPercentage", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Models.TeleconferenceDeviceMediaQuality.TeleconferenceDeviceMediaQuality_maximumInboundPacketLossRateInPercentage MaximumInboundPacketLossRateInPercentage
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.TeleconferenceDeviceMediaQuality.TeleconferenceDeviceMediaQuality_maximumInboundPacketLossRateInPercentage>("maximumInboundPacketLossRateInPercentage"); }
            set { BackingStore?.Set("maximumInboundPacketLossRateInPercentage", value); }
        }
#endif
        /// <summary>The maximum inbound stream network round trip delay.</summary>
        public TimeSpan? MaximumInboundRoundTripDelay
        {
            get { return BackingStore?.Get<TimeSpan?>("maximumInboundRoundTripDelay"); }
            set { BackingStore?.Set("maximumInboundRoundTripDelay", value); }
        }
        /// <summary>The maximum outbound stream network jitter.</summary>
        public TimeSpan? MaximumOutboundJitter
        {
            get { return BackingStore?.Get<TimeSpan?>("maximumOutboundJitter"); }
            set { BackingStore?.Set("maximumOutboundJitter", value); }
        }
        /// <summary>The maximum outbound stream packet loss rate in percentage (0-100). For example, 0.01 means 0.01%.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Models.TeleconferenceDeviceMediaQuality.TeleconferenceDeviceMediaQuality_maximumOutboundPacketLossRateInPercentage? MaximumOutboundPacketLossRateInPercentage
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.TeleconferenceDeviceMediaQuality.TeleconferenceDeviceMediaQuality_maximumOutboundPacketLossRateInPercentage?>("maximumOutboundPacketLossRateInPercentage"); }
            set { BackingStore?.Set("maximumOutboundPacketLossRateInPercentage", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Models.TeleconferenceDeviceMediaQuality.TeleconferenceDeviceMediaQuality_maximumOutboundPacketLossRateInPercentage MaximumOutboundPacketLossRateInPercentage
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.TeleconferenceDeviceMediaQuality.TeleconferenceDeviceMediaQuality_maximumOutboundPacketLossRateInPercentage>("maximumOutboundPacketLossRateInPercentage"); }
            set { BackingStore?.Set("maximumOutboundPacketLossRateInPercentage", value); }
        }
#endif
        /// <summary>The maximum outbound stream network round trip delay.</summary>
        public TimeSpan? MaximumOutboundRoundTripDelay
        {
            get { return BackingStore?.Get<TimeSpan?>("maximumOutboundRoundTripDelay"); }
            set { BackingStore?.Set("maximumOutboundRoundTripDelay", value); }
        }
        /// <summary>The total modality duration. If the media enabled and disabled multiple times, MediaDuration will the summation of all of the durations.</summary>
        public TimeSpan? MediaDuration
        {
            get { return BackingStore?.Get<TimeSpan?>("mediaDuration"); }
            set { BackingStore?.Set("mediaDuration", value); }
        }
        /// <summary>The network link speed in bytes</summary>
        public long? NetworkLinkSpeedInBytes
        {
            get { return BackingStore?.Get<long?>("networkLinkSpeedInBytes"); }
            set { BackingStore?.Set("networkLinkSpeedInBytes", value); }
        }
        /// <summary>The OdataType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OdataType
        {
            get { return BackingStore?.Get<string?>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#nullable restore
#else
        public string OdataType
        {
            get { return BackingStore?.Get<string>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#endif
        /// <summary>The total number of the outbound packets.</summary>
        public long? OutboundPackets
        {
            get { return BackingStore?.Get<long?>("outboundPackets"); }
            set { BackingStore?.Set("outboundPackets", value); }
        }
        /// <summary>The remote IP address for the media session.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RemoteIPAddress
        {
            get { return BackingStore?.Get<string?>("remoteIPAddress"); }
            set { BackingStore?.Set("remoteIPAddress", value); }
        }
#nullable restore
#else
        public string RemoteIPAddress
        {
            get { return BackingStore?.Get<string>("remoteIPAddress"); }
            set { BackingStore?.Set("remoteIPAddress", value); }
        }
#endif
        /// <summary>The remote media port.</summary>
        public int? RemotePort
        {
            get { return BackingStore?.Get<int?>("remotePort"); }
            set { BackingStore?.Set("remotePort", value); }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Microsoft.Graph.Models.TeleconferenceDeviceMediaQuality"/> and sets the default values.
        /// </summary>
        public TeleconferenceDeviceMediaQuality()
        {
            BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Models.TeleconferenceDeviceMediaQuality"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Microsoft.Graph.Models.TeleconferenceDeviceMediaQuality CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            var mappingValue = parseNode.GetChildNode("@odata.type")?.GetStringValue();
            return mappingValue switch
            {
                "#microsoft.graph.teleconferenceDeviceAudioQuality" => new global::Microsoft.Graph.Models.TeleconferenceDeviceAudioQuality(),
                "#microsoft.graph.teleconferenceDeviceScreenSharingQuality" => new global::Microsoft.Graph.Models.TeleconferenceDeviceScreenSharingQuality(),
                "#microsoft.graph.teleconferenceDeviceVideoQuality" => new global::Microsoft.Graph.Models.TeleconferenceDeviceVideoQuality(),
                _ => new global::Microsoft.Graph.Models.TeleconferenceDeviceMediaQuality(),
            };
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "averageInboundJitter", n => { AverageInboundJitter = n.GetTimeSpanValue(); } },
                { "averageInboundPacketLossRateInPercentage", n => { AverageInboundPacketLossRateInPercentage = n.GetObjectValue<global::Microsoft.Graph.Models.TeleconferenceDeviceMediaQuality.TeleconferenceDeviceMediaQuality_averageInboundPacketLossRateInPercentage>(global::Microsoft.Graph.Models.TeleconferenceDeviceMediaQuality.TeleconferenceDeviceMediaQuality_averageInboundPacketLossRateInPercentage.CreateFromDiscriminatorValue); } },
                { "averageInboundRoundTripDelay", n => { AverageInboundRoundTripDelay = n.GetTimeSpanValue(); } },
                { "averageOutboundJitter", n => { AverageOutboundJitter = n.GetTimeSpanValue(); } },
                { "averageOutboundPacketLossRateInPercentage", n => { AverageOutboundPacketLossRateInPercentage = n.GetObjectValue<global::Microsoft.Graph.Models.TeleconferenceDeviceMediaQuality.TeleconferenceDeviceMediaQuality_averageOutboundPacketLossRateInPercentage>(global::Microsoft.Graph.Models.TeleconferenceDeviceMediaQuality.TeleconferenceDeviceMediaQuality_averageOutboundPacketLossRateInPercentage.CreateFromDiscriminatorValue); } },
                { "averageOutboundRoundTripDelay", n => { AverageOutboundRoundTripDelay = n.GetTimeSpanValue(); } },
                { "channelIndex", n => { ChannelIndex = n.GetIntValue(); } },
                { "inboundPackets", n => { InboundPackets = n.GetLongValue(); } },
                { "localIPAddress", n => { LocalIPAddress = n.GetStringValue(); } },
                { "localPort", n => { LocalPort = n.GetIntValue(); } },
                { "maximumInboundJitter", n => { MaximumInboundJitter = n.GetTimeSpanValue(); } },
                { "maximumInboundPacketLossRateInPercentage", n => { MaximumInboundPacketLossRateInPercentage = n.GetObjectValue<global::Microsoft.Graph.Models.TeleconferenceDeviceMediaQuality.TeleconferenceDeviceMediaQuality_maximumInboundPacketLossRateInPercentage>(global::Microsoft.Graph.Models.TeleconferenceDeviceMediaQuality.TeleconferenceDeviceMediaQuality_maximumInboundPacketLossRateInPercentage.CreateFromDiscriminatorValue); } },
                { "maximumInboundRoundTripDelay", n => { MaximumInboundRoundTripDelay = n.GetTimeSpanValue(); } },
                { "maximumOutboundJitter", n => { MaximumOutboundJitter = n.GetTimeSpanValue(); } },
                { "maximumOutboundPacketLossRateInPercentage", n => { MaximumOutboundPacketLossRateInPercentage = n.GetObjectValue<global::Microsoft.Graph.Models.TeleconferenceDeviceMediaQuality.TeleconferenceDeviceMediaQuality_maximumOutboundPacketLossRateInPercentage>(global::Microsoft.Graph.Models.TeleconferenceDeviceMediaQuality.TeleconferenceDeviceMediaQuality_maximumOutboundPacketLossRateInPercentage.CreateFromDiscriminatorValue); } },
                { "maximumOutboundRoundTripDelay", n => { MaximumOutboundRoundTripDelay = n.GetTimeSpanValue(); } },
                { "mediaDuration", n => { MediaDuration = n.GetTimeSpanValue(); } },
                { "networkLinkSpeedInBytes", n => { NetworkLinkSpeedInBytes = n.GetLongValue(); } },
                { "@odata.type", n => { OdataType = n.GetStringValue(); } },
                { "outboundPackets", n => { OutboundPackets = n.GetLongValue(); } },
                { "remoteIPAddress", n => { RemoteIPAddress = n.GetStringValue(); } },
                { "remotePort", n => { RemotePort = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteTimeSpanValue("averageInboundJitter", AverageInboundJitter);
            writer.WriteObjectValue<global::Microsoft.Graph.Models.TeleconferenceDeviceMediaQuality.TeleconferenceDeviceMediaQuality_averageInboundPacketLossRateInPercentage>("averageInboundPacketLossRateInPercentage", AverageInboundPacketLossRateInPercentage);
            writer.WriteTimeSpanValue("averageInboundRoundTripDelay", AverageInboundRoundTripDelay);
            writer.WriteTimeSpanValue("averageOutboundJitter", AverageOutboundJitter);
            writer.WriteObjectValue<global::Microsoft.Graph.Models.TeleconferenceDeviceMediaQuality.TeleconferenceDeviceMediaQuality_averageOutboundPacketLossRateInPercentage>("averageOutboundPacketLossRateInPercentage", AverageOutboundPacketLossRateInPercentage);
            writer.WriteTimeSpanValue("averageOutboundRoundTripDelay", AverageOutboundRoundTripDelay);
            writer.WriteIntValue("channelIndex", ChannelIndex);
            writer.WriteLongValue("inboundPackets", InboundPackets);
            writer.WriteStringValue("localIPAddress", LocalIPAddress);
            writer.WriteIntValue("localPort", LocalPort);
            writer.WriteTimeSpanValue("maximumInboundJitter", MaximumInboundJitter);
            writer.WriteObjectValue<global::Microsoft.Graph.Models.TeleconferenceDeviceMediaQuality.TeleconferenceDeviceMediaQuality_maximumInboundPacketLossRateInPercentage>("maximumInboundPacketLossRateInPercentage", MaximumInboundPacketLossRateInPercentage);
            writer.WriteTimeSpanValue("maximumInboundRoundTripDelay", MaximumInboundRoundTripDelay);
            writer.WriteTimeSpanValue("maximumOutboundJitter", MaximumOutboundJitter);
            writer.WriteObjectValue<global::Microsoft.Graph.Models.TeleconferenceDeviceMediaQuality.TeleconferenceDeviceMediaQuality_maximumOutboundPacketLossRateInPercentage>("maximumOutboundPacketLossRateInPercentage", MaximumOutboundPacketLossRateInPercentage);
            writer.WriteTimeSpanValue("maximumOutboundRoundTripDelay", MaximumOutboundRoundTripDelay);
            writer.WriteTimeSpanValue("mediaDuration", MediaDuration);
            writer.WriteLongValue("networkLinkSpeedInBytes", NetworkLinkSpeedInBytes);
            writer.WriteStringValue("@odata.type", OdataType);
            writer.WriteLongValue("outboundPackets", OutboundPackets);
            writer.WriteStringValue("remoteIPAddress", RemoteIPAddress);
            writer.WriteIntValue("remotePort", RemotePort);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="double"/>, <see cref="global::Microsoft.Graph.Models.ReferenceNumeric"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.20.0")]
        public partial class TeleconferenceDeviceMediaQuality_averageInboundPacketLossRateInPercentage : IBackedModel, IComposedTypeWrapper, IParsable
        {
            /// <summary>Stores model information.</summary>
            public IBackingStore BackingStore { get; private set; }
            /// <summary>Composed type representation for type <see cref="double"/></summary>
            public double? Double
            {
                get { return BackingStore?.Get<double?>("double"); }
                set { BackingStore?.Set("double", value); }
            }
            /// <summary>Composed type representation for type <see cref="global::Microsoft.Graph.Models.ReferenceNumeric"/></summary>
            public global::Microsoft.Graph.Models.ReferenceNumeric? ReferenceNumeric
            {
                get { return BackingStore?.Get<global::Microsoft.Graph.Models.ReferenceNumeric?>("ReferenceNumeric"); }
                set { BackingStore?.Set("ReferenceNumeric", value); }
            }
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String
            {
                get { return BackingStore?.Get<string?>("string"); }
                set { BackingStore?.Set("string", value); }
            }
#nullable restore
#else
            public string String
            {
                get { return BackingStore?.Get<string>("string"); }
                set { BackingStore?.Set("string", value); }
            }
#endif
            /// <summary>
            /// Instantiates a new <see cref="global::Microsoft.Graph.Models.TeleconferenceDeviceMediaQuality.TeleconferenceDeviceMediaQuality_averageInboundPacketLossRateInPercentage"/> and sets the default values.
            /// </summary>
            public TeleconferenceDeviceMediaQuality_averageInboundPacketLossRateInPercentage()
            {
                BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
            }
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Microsoft.Graph.Models.TeleconferenceDeviceMediaQuality.TeleconferenceDeviceMediaQuality_averageInboundPacketLossRateInPercentage"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Microsoft.Graph.Models.TeleconferenceDeviceMediaQuality.TeleconferenceDeviceMediaQuality_averageInboundPacketLossRateInPercentage CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::Microsoft.Graph.Models.TeleconferenceDeviceMediaQuality.TeleconferenceDeviceMediaQuality_averageInboundPacketLossRateInPercentage();
                if(parseNode.GetEnumValue<global::Microsoft.Graph.Models.ReferenceNumeric>() is global::Microsoft.Graph.Models.ReferenceNumeric referenceNumericValue)
                {
                    result.ReferenceNumeric = referenceNumericValue;
                }
                else if(parseNode.GetDoubleValue() is double doubleValue)
                {
                    result.Double = doubleValue;
                }
                else if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(ReferenceNumeric != null)
                {
                    writer.WriteEnumValue<global::Microsoft.Graph.Models.ReferenceNumeric>(null, ReferenceNumeric);
                }
                else if(Double != null)
                {
                    writer.WriteDoubleValue(null, Double);
                }
                else if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="double"/>, <see cref="global::Microsoft.Graph.Models.ReferenceNumeric"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.20.0")]
        public partial class TeleconferenceDeviceMediaQuality_averageOutboundPacketLossRateInPercentage : IBackedModel, IComposedTypeWrapper, IParsable
        {
            /// <summary>Stores model information.</summary>
            public IBackingStore BackingStore { get; private set; }
            /// <summary>Composed type representation for type <see cref="double"/></summary>
            public double? Double
            {
                get { return BackingStore?.Get<double?>("double"); }
                set { BackingStore?.Set("double", value); }
            }
            /// <summary>Composed type representation for type <see cref="global::Microsoft.Graph.Models.ReferenceNumeric"/></summary>
            public global::Microsoft.Graph.Models.ReferenceNumeric? ReferenceNumeric
            {
                get { return BackingStore?.Get<global::Microsoft.Graph.Models.ReferenceNumeric?>("ReferenceNumeric"); }
                set { BackingStore?.Set("ReferenceNumeric", value); }
            }
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String
            {
                get { return BackingStore?.Get<string?>("string"); }
                set { BackingStore?.Set("string", value); }
            }
#nullable restore
#else
            public string String
            {
                get { return BackingStore?.Get<string>("string"); }
                set { BackingStore?.Set("string", value); }
            }
#endif
            /// <summary>
            /// Instantiates a new <see cref="global::Microsoft.Graph.Models.TeleconferenceDeviceMediaQuality.TeleconferenceDeviceMediaQuality_averageOutboundPacketLossRateInPercentage"/> and sets the default values.
            /// </summary>
            public TeleconferenceDeviceMediaQuality_averageOutboundPacketLossRateInPercentage()
            {
                BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
            }
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Microsoft.Graph.Models.TeleconferenceDeviceMediaQuality.TeleconferenceDeviceMediaQuality_averageOutboundPacketLossRateInPercentage"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Microsoft.Graph.Models.TeleconferenceDeviceMediaQuality.TeleconferenceDeviceMediaQuality_averageOutboundPacketLossRateInPercentage CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::Microsoft.Graph.Models.TeleconferenceDeviceMediaQuality.TeleconferenceDeviceMediaQuality_averageOutboundPacketLossRateInPercentage();
                if(parseNode.GetEnumValue<global::Microsoft.Graph.Models.ReferenceNumeric>() is global::Microsoft.Graph.Models.ReferenceNumeric referenceNumericValue)
                {
                    result.ReferenceNumeric = referenceNumericValue;
                }
                else if(parseNode.GetDoubleValue() is double doubleValue)
                {
                    result.Double = doubleValue;
                }
                else if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(ReferenceNumeric != null)
                {
                    writer.WriteEnumValue<global::Microsoft.Graph.Models.ReferenceNumeric>(null, ReferenceNumeric);
                }
                else if(Double != null)
                {
                    writer.WriteDoubleValue(null, Double);
                }
                else if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="double"/>, <see cref="global::Microsoft.Graph.Models.ReferenceNumeric"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.20.0")]
        public partial class TeleconferenceDeviceMediaQuality_maximumInboundPacketLossRateInPercentage : IBackedModel, IComposedTypeWrapper, IParsable
        {
            /// <summary>Stores model information.</summary>
            public IBackingStore BackingStore { get; private set; }
            /// <summary>Composed type representation for type <see cref="double"/></summary>
            public double? Double
            {
                get { return BackingStore?.Get<double?>("double"); }
                set { BackingStore?.Set("double", value); }
            }
            /// <summary>Composed type representation for type <see cref="global::Microsoft.Graph.Models.ReferenceNumeric"/></summary>
            public global::Microsoft.Graph.Models.ReferenceNumeric? ReferenceNumeric
            {
                get { return BackingStore?.Get<global::Microsoft.Graph.Models.ReferenceNumeric?>("ReferenceNumeric"); }
                set { BackingStore?.Set("ReferenceNumeric", value); }
            }
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String
            {
                get { return BackingStore?.Get<string?>("string"); }
                set { BackingStore?.Set("string", value); }
            }
#nullable restore
#else
            public string String
            {
                get { return BackingStore?.Get<string>("string"); }
                set { BackingStore?.Set("string", value); }
            }
#endif
            /// <summary>
            /// Instantiates a new <see cref="global::Microsoft.Graph.Models.TeleconferenceDeviceMediaQuality.TeleconferenceDeviceMediaQuality_maximumInboundPacketLossRateInPercentage"/> and sets the default values.
            /// </summary>
            public TeleconferenceDeviceMediaQuality_maximumInboundPacketLossRateInPercentage()
            {
                BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
            }
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Microsoft.Graph.Models.TeleconferenceDeviceMediaQuality.TeleconferenceDeviceMediaQuality_maximumInboundPacketLossRateInPercentage"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Microsoft.Graph.Models.TeleconferenceDeviceMediaQuality.TeleconferenceDeviceMediaQuality_maximumInboundPacketLossRateInPercentage CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::Microsoft.Graph.Models.TeleconferenceDeviceMediaQuality.TeleconferenceDeviceMediaQuality_maximumInboundPacketLossRateInPercentage();
                if(parseNode.GetEnumValue<global::Microsoft.Graph.Models.ReferenceNumeric>() is global::Microsoft.Graph.Models.ReferenceNumeric referenceNumericValue)
                {
                    result.ReferenceNumeric = referenceNumericValue;
                }
                else if(parseNode.GetDoubleValue() is double doubleValue)
                {
                    result.Double = doubleValue;
                }
                else if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(ReferenceNumeric != null)
                {
                    writer.WriteEnumValue<global::Microsoft.Graph.Models.ReferenceNumeric>(null, ReferenceNumeric);
                }
                else if(Double != null)
                {
                    writer.WriteDoubleValue(null, Double);
                }
                else if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="double"/>, <see cref="global::Microsoft.Graph.Models.ReferenceNumeric"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.20.0")]
        public partial class TeleconferenceDeviceMediaQuality_maximumOutboundPacketLossRateInPercentage : IBackedModel, IComposedTypeWrapper, IParsable
        {
            /// <summary>Stores model information.</summary>
            public IBackingStore BackingStore { get; private set; }
            /// <summary>Composed type representation for type <see cref="double"/></summary>
            public double? Double
            {
                get { return BackingStore?.Get<double?>("double"); }
                set { BackingStore?.Set("double", value); }
            }
            /// <summary>Composed type representation for type <see cref="global::Microsoft.Graph.Models.ReferenceNumeric"/></summary>
            public global::Microsoft.Graph.Models.ReferenceNumeric? ReferenceNumeric
            {
                get { return BackingStore?.Get<global::Microsoft.Graph.Models.ReferenceNumeric?>("ReferenceNumeric"); }
                set { BackingStore?.Set("ReferenceNumeric", value); }
            }
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String
            {
                get { return BackingStore?.Get<string?>("string"); }
                set { BackingStore?.Set("string", value); }
            }
#nullable restore
#else
            public string String
            {
                get { return BackingStore?.Get<string>("string"); }
                set { BackingStore?.Set("string", value); }
            }
#endif
            /// <summary>
            /// Instantiates a new <see cref="global::Microsoft.Graph.Models.TeleconferenceDeviceMediaQuality.TeleconferenceDeviceMediaQuality_maximumOutboundPacketLossRateInPercentage"/> and sets the default values.
            /// </summary>
            public TeleconferenceDeviceMediaQuality_maximumOutboundPacketLossRateInPercentage()
            {
                BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
            }
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Microsoft.Graph.Models.TeleconferenceDeviceMediaQuality.TeleconferenceDeviceMediaQuality_maximumOutboundPacketLossRateInPercentage"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Microsoft.Graph.Models.TeleconferenceDeviceMediaQuality.TeleconferenceDeviceMediaQuality_maximumOutboundPacketLossRateInPercentage CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::Microsoft.Graph.Models.TeleconferenceDeviceMediaQuality.TeleconferenceDeviceMediaQuality_maximumOutboundPacketLossRateInPercentage();
                if(parseNode.GetEnumValue<global::Microsoft.Graph.Models.ReferenceNumeric>() is global::Microsoft.Graph.Models.ReferenceNumeric referenceNumericValue)
                {
                    result.ReferenceNumeric = referenceNumericValue;
                }
                else if(parseNode.GetDoubleValue() is double doubleValue)
                {
                    result.Double = doubleValue;
                }
                else if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(ReferenceNumeric != null)
                {
                    writer.WriteEnumValue<global::Microsoft.Graph.Models.ReferenceNumeric>(null, ReferenceNumeric);
                }
                else if(Double != null)
                {
                    writer.WriteDoubleValue(null, Double);
                }
                else if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
            }
        }
    }
}
#pragma warning restore CS0618
