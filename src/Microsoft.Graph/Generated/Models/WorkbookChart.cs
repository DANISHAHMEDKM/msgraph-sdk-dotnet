// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.20.0")]
    #pragma warning disable CS1591
    public partial class WorkbookChart : global::Microsoft.Graph.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Represents chart axes. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Models.WorkbookChartAxes? Axes
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.WorkbookChartAxes?>("axes"); }
            set { BackingStore?.Set("axes", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Models.WorkbookChartAxes Axes
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.WorkbookChartAxes>("axes"); }
            set { BackingStore?.Set("axes", value); }
        }
#endif
        /// <summary>Represents the data labels on the chart. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Models.WorkbookChartDataLabels? DataLabels
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.WorkbookChartDataLabels?>("dataLabels"); }
            set { BackingStore?.Set("dataLabels", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Models.WorkbookChartDataLabels DataLabels
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.WorkbookChartDataLabels>("dataLabels"); }
            set { BackingStore?.Set("dataLabels", value); }
        }
#endif
        /// <summary>Encapsulates the format properties for the chart area. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Models.WorkbookChartAreaFormat? Format
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.WorkbookChartAreaFormat?>("format"); }
            set { BackingStore?.Set("format", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Models.WorkbookChartAreaFormat Format
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.WorkbookChartAreaFormat>("format"); }
            set { BackingStore?.Set("format", value); }
        }
#endif
        /// <summary>Represents the height, in points, of the chart object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Models.WorkbookChart.WorkbookChart_height? Height
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.WorkbookChart.WorkbookChart_height?>("height"); }
            set { BackingStore?.Set("height", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Models.WorkbookChart.WorkbookChart_height Height
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.WorkbookChart.WorkbookChart_height>("height"); }
            set { BackingStore?.Set("height", value); }
        }
#endif
        /// <summary>The distance, in points, from the left side of the chart to the worksheet origin.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Models.WorkbookChart.WorkbookChart_left? Left
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.WorkbookChart.WorkbookChart_left?>("left"); }
            set { BackingStore?.Set("left", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Models.WorkbookChart.WorkbookChart_left Left
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.WorkbookChart.WorkbookChart_left>("left"); }
            set { BackingStore?.Set("left", value); }
        }
#endif
        /// <summary>Represents the legend for the chart. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Models.WorkbookChartLegend? Legend
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.WorkbookChartLegend?>("legend"); }
            set { BackingStore?.Set("legend", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Models.WorkbookChartLegend Legend
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.WorkbookChartLegend>("legend"); }
            set { BackingStore?.Set("legend", value); }
        }
#endif
        /// <summary>Represents the name of a chart object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name
        {
            get { return BackingStore?.Get<string?>("name"); }
            set { BackingStore?.Set("name", value); }
        }
#nullable restore
#else
        public string Name
        {
            get { return BackingStore?.Get<string>("name"); }
            set { BackingStore?.Set("name", value); }
        }
#endif
        /// <summary>Represents either a single series or collection of series in the chart. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.WorkbookChartSeries>? Series
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.WorkbookChartSeries>?>("series"); }
            set { BackingStore?.Set("series", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.WorkbookChartSeries> Series
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.WorkbookChartSeries>>("series"); }
            set { BackingStore?.Set("series", value); }
        }
#endif
        /// <summary>Represents the title of the specified chart, including the text, visibility, position and formatting of the title. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Models.WorkbookChartTitle? Title
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.WorkbookChartTitle?>("title"); }
            set { BackingStore?.Set("title", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Models.WorkbookChartTitle Title
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.WorkbookChartTitle>("title"); }
            set { BackingStore?.Set("title", value); }
        }
#endif
        /// <summary>Represents the distance, in points, from the top edge of the object to the top of row 1 (on a worksheet) or the top of the chart area (on a chart).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Models.WorkbookChart.WorkbookChart_top? Top
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.WorkbookChart.WorkbookChart_top?>("top"); }
            set { BackingStore?.Set("top", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Models.WorkbookChart.WorkbookChart_top Top
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.WorkbookChart.WorkbookChart_top>("top"); }
            set { BackingStore?.Set("top", value); }
        }
#endif
        /// <summary>Represents the width, in points, of the chart object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Models.WorkbookChart.WorkbookChart_width? Width
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.WorkbookChart.WorkbookChart_width?>("width"); }
            set { BackingStore?.Set("width", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Models.WorkbookChart.WorkbookChart_width Width
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.WorkbookChart.WorkbookChart_width>("width"); }
            set { BackingStore?.Set("width", value); }
        }
#endif
        /// <summary>The worksheet containing the current chart. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Models.WorkbookWorksheet? Worksheet
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.WorkbookWorksheet?>("worksheet"); }
            set { BackingStore?.Set("worksheet", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Models.WorkbookWorksheet Worksheet
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.WorkbookWorksheet>("worksheet"); }
            set { BackingStore?.Set("worksheet", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Models.WorkbookChart"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Models.WorkbookChart CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Models.WorkbookChart();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "axes", n => { Axes = n.GetObjectValue<global::Microsoft.Graph.Models.WorkbookChartAxes>(global::Microsoft.Graph.Models.WorkbookChartAxes.CreateFromDiscriminatorValue); } },
                { "dataLabels", n => { DataLabels = n.GetObjectValue<global::Microsoft.Graph.Models.WorkbookChartDataLabels>(global::Microsoft.Graph.Models.WorkbookChartDataLabels.CreateFromDiscriminatorValue); } },
                { "format", n => { Format = n.GetObjectValue<global::Microsoft.Graph.Models.WorkbookChartAreaFormat>(global::Microsoft.Graph.Models.WorkbookChartAreaFormat.CreateFromDiscriminatorValue); } },
                { "height", n => { Height = n.GetObjectValue<global::Microsoft.Graph.Models.WorkbookChart.WorkbookChart_height>(global::Microsoft.Graph.Models.WorkbookChart.WorkbookChart_height.CreateFromDiscriminatorValue); } },
                { "left", n => { Left = n.GetObjectValue<global::Microsoft.Graph.Models.WorkbookChart.WorkbookChart_left>(global::Microsoft.Graph.Models.WorkbookChart.WorkbookChart_left.CreateFromDiscriminatorValue); } },
                { "legend", n => { Legend = n.GetObjectValue<global::Microsoft.Graph.Models.WorkbookChartLegend>(global::Microsoft.Graph.Models.WorkbookChartLegend.CreateFromDiscriminatorValue); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "series", n => { Series = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Models.WorkbookChartSeries>(global::Microsoft.Graph.Models.WorkbookChartSeries.CreateFromDiscriminatorValue)?.AsList(); } },
                { "title", n => { Title = n.GetObjectValue<global::Microsoft.Graph.Models.WorkbookChartTitle>(global::Microsoft.Graph.Models.WorkbookChartTitle.CreateFromDiscriminatorValue); } },
                { "top", n => { Top = n.GetObjectValue<global::Microsoft.Graph.Models.WorkbookChart.WorkbookChart_top>(global::Microsoft.Graph.Models.WorkbookChart.WorkbookChart_top.CreateFromDiscriminatorValue); } },
                { "width", n => { Width = n.GetObjectValue<global::Microsoft.Graph.Models.WorkbookChart.WorkbookChart_width>(global::Microsoft.Graph.Models.WorkbookChart.WorkbookChart_width.CreateFromDiscriminatorValue); } },
                { "worksheet", n => { Worksheet = n.GetObjectValue<global::Microsoft.Graph.Models.WorkbookWorksheet>(global::Microsoft.Graph.Models.WorkbookWorksheet.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteObjectValue<global::Microsoft.Graph.Models.WorkbookChartAxes>("axes", Axes);
            writer.WriteObjectValue<global::Microsoft.Graph.Models.WorkbookChartDataLabels>("dataLabels", DataLabels);
            writer.WriteObjectValue<global::Microsoft.Graph.Models.WorkbookChartAreaFormat>("format", Format);
            writer.WriteObjectValue<global::Microsoft.Graph.Models.WorkbookChart.WorkbookChart_height>("height", Height);
            writer.WriteObjectValue<global::Microsoft.Graph.Models.WorkbookChart.WorkbookChart_left>("left", Left);
            writer.WriteObjectValue<global::Microsoft.Graph.Models.WorkbookChartLegend>("legend", Legend);
            writer.WriteStringValue("name", Name);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Models.WorkbookChartSeries>("series", Series);
            writer.WriteObjectValue<global::Microsoft.Graph.Models.WorkbookChartTitle>("title", Title);
            writer.WriteObjectValue<global::Microsoft.Graph.Models.WorkbookChart.WorkbookChart_top>("top", Top);
            writer.WriteObjectValue<global::Microsoft.Graph.Models.WorkbookChart.WorkbookChart_width>("width", Width);
            writer.WriteObjectValue<global::Microsoft.Graph.Models.WorkbookWorksheet>("worksheet", Worksheet);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="double"/>, <see cref="global::Microsoft.Graph.Models.ReferenceNumeric"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.20.0")]
        public partial class WorkbookChart_height : IBackedModel, IComposedTypeWrapper, IParsable
        {
            /// <summary>Stores model information.</summary>
            public IBackingStore BackingStore { get; private set; }
            /// <summary>Composed type representation for type <see cref="double"/></summary>
            public double? Double
            {
                get { return BackingStore?.Get<double?>("double"); }
                set { BackingStore?.Set("double", value); }
            }
            /// <summary>Composed type representation for type <see cref="global::Microsoft.Graph.Models.ReferenceNumeric"/></summary>
            public global::Microsoft.Graph.Models.ReferenceNumeric? ReferenceNumeric
            {
                get { return BackingStore?.Get<global::Microsoft.Graph.Models.ReferenceNumeric?>("ReferenceNumeric"); }
                set { BackingStore?.Set("ReferenceNumeric", value); }
            }
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String
            {
                get { return BackingStore?.Get<string?>("string"); }
                set { BackingStore?.Set("string", value); }
            }
#nullable restore
#else
            public string String
            {
                get { return BackingStore?.Get<string>("string"); }
                set { BackingStore?.Set("string", value); }
            }
#endif
            /// <summary>
            /// Instantiates a new <see cref="global::Microsoft.Graph.Models.WorkbookChart.WorkbookChart_height"/> and sets the default values.
            /// </summary>
            public WorkbookChart_height()
            {
                BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
            }
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Microsoft.Graph.Models.WorkbookChart.WorkbookChart_height"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Microsoft.Graph.Models.WorkbookChart.WorkbookChart_height CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::Microsoft.Graph.Models.WorkbookChart.WorkbookChart_height();
                if(parseNode.GetEnumValue<global::Microsoft.Graph.Models.ReferenceNumeric>() is global::Microsoft.Graph.Models.ReferenceNumeric referenceNumericValue)
                {
                    result.ReferenceNumeric = referenceNumericValue;
                }
                else if(parseNode.GetDoubleValue() is double doubleValue)
                {
                    result.Double = doubleValue;
                }
                else if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(ReferenceNumeric != null)
                {
                    writer.WriteEnumValue<global::Microsoft.Graph.Models.ReferenceNumeric>(null, ReferenceNumeric);
                }
                else if(Double != null)
                {
                    writer.WriteDoubleValue(null, Double);
                }
                else if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="double"/>, <see cref="global::Microsoft.Graph.Models.ReferenceNumeric"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.20.0")]
        public partial class WorkbookChart_left : IBackedModel, IComposedTypeWrapper, IParsable
        {
            /// <summary>Stores model information.</summary>
            public IBackingStore BackingStore { get; private set; }
            /// <summary>Composed type representation for type <see cref="double"/></summary>
            public double? Double
            {
                get { return BackingStore?.Get<double?>("double"); }
                set { BackingStore?.Set("double", value); }
            }
            /// <summary>Composed type representation for type <see cref="global::Microsoft.Graph.Models.ReferenceNumeric"/></summary>
            public global::Microsoft.Graph.Models.ReferenceNumeric? ReferenceNumeric
            {
                get { return BackingStore?.Get<global::Microsoft.Graph.Models.ReferenceNumeric?>("ReferenceNumeric"); }
                set { BackingStore?.Set("ReferenceNumeric", value); }
            }
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String
            {
                get { return BackingStore?.Get<string?>("string"); }
                set { BackingStore?.Set("string", value); }
            }
#nullable restore
#else
            public string String
            {
                get { return BackingStore?.Get<string>("string"); }
                set { BackingStore?.Set("string", value); }
            }
#endif
            /// <summary>
            /// Instantiates a new <see cref="global::Microsoft.Graph.Models.WorkbookChart.WorkbookChart_left"/> and sets the default values.
            /// </summary>
            public WorkbookChart_left()
            {
                BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
            }
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Microsoft.Graph.Models.WorkbookChart.WorkbookChart_left"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Microsoft.Graph.Models.WorkbookChart.WorkbookChart_left CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::Microsoft.Graph.Models.WorkbookChart.WorkbookChart_left();
                if(parseNode.GetEnumValue<global::Microsoft.Graph.Models.ReferenceNumeric>() is global::Microsoft.Graph.Models.ReferenceNumeric referenceNumericValue)
                {
                    result.ReferenceNumeric = referenceNumericValue;
                }
                else if(parseNode.GetDoubleValue() is double doubleValue)
                {
                    result.Double = doubleValue;
                }
                else if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(ReferenceNumeric != null)
                {
                    writer.WriteEnumValue<global::Microsoft.Graph.Models.ReferenceNumeric>(null, ReferenceNumeric);
                }
                else if(Double != null)
                {
                    writer.WriteDoubleValue(null, Double);
                }
                else if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="double"/>, <see cref="global::Microsoft.Graph.Models.ReferenceNumeric"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.20.0")]
        public partial class WorkbookChart_top : IBackedModel, IComposedTypeWrapper, IParsable
        {
            /// <summary>Stores model information.</summary>
            public IBackingStore BackingStore { get; private set; }
            /// <summary>Composed type representation for type <see cref="double"/></summary>
            public double? Double
            {
                get { return BackingStore?.Get<double?>("double"); }
                set { BackingStore?.Set("double", value); }
            }
            /// <summary>Composed type representation for type <see cref="global::Microsoft.Graph.Models.ReferenceNumeric"/></summary>
            public global::Microsoft.Graph.Models.ReferenceNumeric? ReferenceNumeric
            {
                get { return BackingStore?.Get<global::Microsoft.Graph.Models.ReferenceNumeric?>("ReferenceNumeric"); }
                set { BackingStore?.Set("ReferenceNumeric", value); }
            }
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String
            {
                get { return BackingStore?.Get<string?>("string"); }
                set { BackingStore?.Set("string", value); }
            }
#nullable restore
#else
            public string String
            {
                get { return BackingStore?.Get<string>("string"); }
                set { BackingStore?.Set("string", value); }
            }
#endif
            /// <summary>
            /// Instantiates a new <see cref="global::Microsoft.Graph.Models.WorkbookChart.WorkbookChart_top"/> and sets the default values.
            /// </summary>
            public WorkbookChart_top()
            {
                BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
            }
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Microsoft.Graph.Models.WorkbookChart.WorkbookChart_top"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Microsoft.Graph.Models.WorkbookChart.WorkbookChart_top CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::Microsoft.Graph.Models.WorkbookChart.WorkbookChart_top();
                if(parseNode.GetEnumValue<global::Microsoft.Graph.Models.ReferenceNumeric>() is global::Microsoft.Graph.Models.ReferenceNumeric referenceNumericValue)
                {
                    result.ReferenceNumeric = referenceNumericValue;
                }
                else if(parseNode.GetDoubleValue() is double doubleValue)
                {
                    result.Double = doubleValue;
                }
                else if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(ReferenceNumeric != null)
                {
                    writer.WriteEnumValue<global::Microsoft.Graph.Models.ReferenceNumeric>(null, ReferenceNumeric);
                }
                else if(Double != null)
                {
                    writer.WriteDoubleValue(null, Double);
                }
                else if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="double"/>, <see cref="global::Microsoft.Graph.Models.ReferenceNumeric"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.20.0")]
        public partial class WorkbookChart_width : IBackedModel, IComposedTypeWrapper, IParsable
        {
            /// <summary>Stores model information.</summary>
            public IBackingStore BackingStore { get; private set; }
            /// <summary>Composed type representation for type <see cref="double"/></summary>
            public double? Double
            {
                get { return BackingStore?.Get<double?>("double"); }
                set { BackingStore?.Set("double", value); }
            }
            /// <summary>Composed type representation for type <see cref="global::Microsoft.Graph.Models.ReferenceNumeric"/></summary>
            public global::Microsoft.Graph.Models.ReferenceNumeric? ReferenceNumeric
            {
                get { return BackingStore?.Get<global::Microsoft.Graph.Models.ReferenceNumeric?>("ReferenceNumeric"); }
                set { BackingStore?.Set("ReferenceNumeric", value); }
            }
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String
            {
                get { return BackingStore?.Get<string?>("string"); }
                set { BackingStore?.Set("string", value); }
            }
#nullable restore
#else
            public string String
            {
                get { return BackingStore?.Get<string>("string"); }
                set { BackingStore?.Set("string", value); }
            }
#endif
            /// <summary>
            /// Instantiates a new <see cref="global::Microsoft.Graph.Models.WorkbookChart.WorkbookChart_width"/> and sets the default values.
            /// </summary>
            public WorkbookChart_width()
            {
                BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
            }
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Microsoft.Graph.Models.WorkbookChart.WorkbookChart_width"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Microsoft.Graph.Models.WorkbookChart.WorkbookChart_width CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::Microsoft.Graph.Models.WorkbookChart.WorkbookChart_width();
                if(parseNode.GetEnumValue<global::Microsoft.Graph.Models.ReferenceNumeric>() is global::Microsoft.Graph.Models.ReferenceNumeric referenceNumericValue)
                {
                    result.ReferenceNumeric = referenceNumericValue;
                }
                else if(parseNode.GetDoubleValue() is double doubleValue)
                {
                    result.Double = doubleValue;
                }
                else if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(ReferenceNumeric != null)
                {
                    writer.WriteEnumValue<global::Microsoft.Graph.Models.ReferenceNumeric>(null, ReferenceNumeric);
                }
                else if(Double != null)
                {
                    writer.WriteDoubleValue(null, Double);
                }
                else if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
            }
        }
    }
}
#pragma warning restore CS0618
